# Welcome to Serverless!
#
# This file is the main config file for your service.
# It's very minimal at this point and uses default values.
# You can always add more config options for more control.
# We've included some commented out config examples here.
# Just uncomment any of them to get that config option.
#
# For full config options, check the docs:
#    docs.serverless.com
#
# Happy Coding!
plugins:
  - serverless-webpack # serverless webpack plugin
  - serverless-dotenv-plugin

package:
  individually: true # to package functions individually. You can toggle this and check the difference webpack generates

custom:
  webpack: # serverless-webpack plugin options
    webpackConfig: webpack.config.js # Name of webpack configuration file
    includeModules: true # Node modules configuration for packaging
    packager: 'npm' # Packager that will be used to package your external modules
#    packager: 'yarn' # Packager that will be used to package your external modules
useDotenv: true

service: import-service
# app and org for use with dashboard.serverless.com
#app: your-app-name
#org: your-org-name

# You can pin your service to only deploy with a specific Serverless version
# Check out our docs for more details
frameworkVersion: '3'

provider:
  name: aws
  runtime: nodejs12.x
  stage: dev
  region: eu-west-1

  iamRoleStatements:
    - Effect: "Allow"
      Action:
        - "s3:*"
      Resource:
        - "arn:aws:s3:::app-products-import/*"
        - "arn:aws:s3:::app-products-import"
    - Effect: Allow
      Action: sqs:*
      Resource:
        Fn::GetAtt: [ SQSQueue, Arn ]
    - Effect: Allow
      Action: sns:*
      Resource:
        Ref: SNSTopic

  environment:
    SQS_URL:
      Ref: SQSQueue
    SNS_TOPIC_ARN:
      Ref: SNSTopic

functions:
  importProductsFile:
    handler: src/importProductsFile.importProductsFile
    events:
      - http:
          path: 'import/'
          method: get
          cors: true
          authorizer:
            name: tokenAuthorizer
            arn: arn:aws:lambda:eu-west-1:499107229445:function:authorization-service-dev-basicAuthorizer
            resultTtlInSeconds: 0
            identitySource: method.request.header.Authorization
            type: token
  importFileParser:
    handler: src/importFileParser.importFileParser
    events:
      - s3:
          bucket: app-products-import
          event: s3:ObjectCreated:*
          rules:
            - prefix: uploaded/
          existing: true
  catalogBatchProcess:
    handler: src/catalogBatchProducts.catalogBatchProducts
    events:
      - sqs:
          batchSize: 5
          arn:
            Fn::GetAtt:
              - SQSQueue
              - Arn

resources:
  Resources:
    SQSQueue:
      Type: AWS::SQS::Queue
      Properties:
        QueueName: app-products-queue
    SNSTopic:
      Type: AWS::SNS::Topic
      Properties:
        TopicName: app-products-topic
    SNSSubscription:
      Type: AWS::SNS::Subscription
      Properties:
        Endpoint: maximsvilenok@gmail.com
        Protocol: email
        TopicArn:
          Ref: SNSTopic
    SNSSubscriptionError:
      Type: AWS::SNS::Subscription
      Properties:
        Endpoint: mlalx@tut.by
        Protocol: email
        TopicArn:
          Ref: SNSTopic
        FilterPolicy:
          errorMail:
            - true
